#!/usr/local/bin/bash
#
# Download or Stream anime from Gogoanime in terminal
#
#/ Usage:
#/   ./gogo-cli.sh
#/ Options:
#/	 -p						 define your fabourite player,
#/							 By default it is mpv
#/	 -H						 history Play where you left off.
#/   -d                      download rather stream
#/   -r <resolution>         optional, specify resolution to download: "1080", "720"...
#/                           by default, the highest resolution is selected
#/   -t <num>                optional, specify a positive integer as num of threads to download.
#/							 By default it is set to 8 don't use more than 16!
#/   -h | --help             display this help message

prog="gogo-cli"
logfile="${XDG_CACHE_HOME:-$HOME/.cache}/gogo-hsts"

c_red="\033[1;31m"
c_green="\033[1;32m"
c_yellow="\033[1;33m"
c_blue="\033[1;34m"
c_magenta="\033[1;35m"
c_cyan="\033[1;36m"
c_reset="\033[0m"


help_text () {
	while IFS= read line; do
		printf "%s\n" "$line"
	done <<-EOF
		USAGE: $prog <query>
		-h		show this help text
		-p		define player, default mpv
		-H		continue where you left off
		-d		download episode
		-r		define resolution -r<h|n|l> high, low or normal. if res not found will fall back to normal
		-t		threads by default 8, don't use more than 16
	EOF
}


############
#  Options #
############
die () {
	printf "$c_red%s$c_reset\n" "$*" >&2
	exit 1
}

err () {
	printf "$c_red%s$c_reset\n" "$*" >&2
}

prog_not_found(){
	printf "$c_red%s$c_reset\n" "Program $1 not found. Please install it first"
	exit 1
}
# option parsing
_CURL="$(command -v curl)" || prog_not_found "curl"
_ARIA="$(command -v aria2c)" || prog_not_found "aria2c"
_SED="$(command -v sed)" || prog_not_found "sed"
_GREP="$(command -v grep)" || prog_not_found "grep"
_HOST="https://gogoanime.vc/"
_REFERER_URL="http://streamani.io/"
_PLAYER="$(command -v iina-cli)" || prog_not_found "iina"
_RESOLUTION=n
is_download=0
scrape=query

while getopts 'hdHp:r:t:' OPT; do
	case $OPT in
		h)
			help_text
			exit 0
			;;
		d)
			is_download=1
			;;
		t)
			_THREAD="$OPTARG"
			if [[ ! "$_THREAD" =~ ^[0-9]+$ || "$_THREAD" -eq 0 ]]; then
				printf "$c_magenta%s$c_reset\n" "-t <num>: Number must be a positive integer"
				exit
			fi
			;;
		r)
			_RESOLUTION="$OPTARG"
			if [[ ! "$_RESOLUTION" = "h" && ! "$_RESOLUTION" = "n" && ! "$_RESOLUTION" = "l" ]]; then
				printf "$c_magenta%s$c_reset\n" "-r <h|n|l>: Resolution must be hi, normal or low"
				exit
			fi
			;;
		p)
			_PLAYER="$OPTARG"
			;;
		H)
			scrape=history
			;;
		\?)
			printf "$c_yellow%s$c_reset\n" "Close and try again or search anime"
			;;

		esac
	done
	shift $((OPTIND - 1))
###############
# End Options #
###############

search_anime () {
	# get anime name along with its id
	search=$(printf '%s' "$1" | tr ' ' '-' )
	titlepattern='<a href="/category/'

	curl -s "$_HOST/search.html" \
		-G \
		-d "keyword=$search" |
	sed -n -E '
		s_^[[:space:]]*<a href="/category/([^"]*)" title="([^"]*)".*_\1_p
		'
}

search_eps () {
	# get available episodes for anime_id
	anime_id=$1

	curl -s "$_HOST/category/$anime_id" |
	sed -n -E '
		/^[[:space:]]*<a href="#" class="active" ep_start/{
		s/.* '\''([0-9]*)'\'' ep_end = '\''([0-9]*)'\''.*/\2/p
		q
		}
		'
}

#get_video_id() {
	## get the download page url
	#anime_id=$1
	#ep_no=$2

	#curl -s "$_HOST$anime_id-episode-$ep_no" |
	#sed -n -E '
		#/^[[:space:]]*<a href="#" rel="13"/{
		#s/.*embed-([^"]*).html".*/\1/p
		#q
		#}'
#}

get_video_id() {
	# get the download page url
	anime_id=$1
	ep_no=$2
	URL="$_HOST$anime_id-episode-$ep_no"
	RESULT=$(python -c 'import webscrap, sys; webscrap.curl(sys.argv[1])' "$URL")
	echo $RESULT| sed 's/.*sbplay1.com\/e\///; s/">.*//'
}

get_video_token () {
	video_id="$1"
	URL="https://sbplay1.com/d/$video_id"
	RESULT=$(python -c 'import webscrap, sys; webscrap.curl(sys.argv[1])' "$URL")
	echo $RESULT | grep "'$video_id','n','" | sed "s/.*'$video_id','n','//;s/').*//"
}
get_video_url (){
	#$1 is video id
	#$2 is video token
	resCheck=`curl -s "https://sbplay1.com/dl?op=download_orig&id=$1&mode=$_RESOLUTION&hash=$2" |
	sed -n 's/.*href="//;s/4">D.*/4/p'`
	if [[ -z "$resCheck" ]]; then
		resCheck=`curl -s "https://sbplay1.com/dl?op=download_orig&id=$1&mode=n&hash=$2" |
		sed -n 's/.*href="//;s/4">D.*/4/p'`
	fi
	echo $resCheck
}


# get query
get_search_query () {
	if [ -z "$*" ]; then
		printf "Search Anime: "
		read -r query
	else
		query=$*
	fi
}

# create history file
[ -f "$logfile" ] || : > "$logfile"

#####################
## Anime selection ##
#####################

anime_selection () {
	search_results=$*
	menu_format_string='[%d] %s\n'
	menu_format_string_c1="$c_blue[$c_cyan%d$c_blue] $c_reset%s\n"
	menu_format_string_c2="$c_blue[$c_cyan%d$c_blue] $c_yellow%s$c_reset\n"

	count=1
	while read anime_id; do
		# alternating colors for menu
		[ $((count % 2)) -eq 0 ] &&
			menu_format_string=$menu_format_string_c1 ||
			menu_format_string=$menu_format_string_c2

		printf "$menu_format_string" "$count" "$anime_id"
		count=$((count+1))
	done <<-EOF
	$search_results
	EOF

	# User input
	printf "$c_blue%s$c_green" "Enter number: "
	read choice
	printf "$c_reset"

	# Check if input is a number
	[ "$choice" -eq "$choice" ] 2>/dev/null || die "Invalid number entered"

	# Select respective anime_id
	count=1
	while read anime_id; do
		if [ $count -eq $choice ]; then
			selection_id=$anime_id
			break
		fi
		count=$((count+1))
	done <<-EOF
	$search_results
	EOF

	[ -z "$selection_id" ] && die "Invalid number entered"

	read last_ep_number <<-EOF
	$(search_eps "$selection_id")
	EOF
}

##################
## Ep selection ##
##################

episode_selection () {
	[ $is_download -eq 1 ] &&
		printf "Range of episodes can be specified: start_number end_number\n"

	printf "${c_blue}Choose episode $c_cyan[1-%d]$c_reset:$c_green " $last_ep_number
	read ep_choice_start ep_choice_end
	printf "$c_reset"

}

open_episode () {
	anime_id=$1
	episode=$2

	# Cool effect way of clearing screen
	printf '\x1B[2J\x1B[1;1H'
	if [ $episode -lt 1 ] || [ $episode -gt $last_ep_number ]; then
		err "Episode out of range"
		printf "${c_blue}Choose episode $c_cyan[1-%d]$c_reset:$c_green " $last_ep_number
		read episode
		printf "$c_reset"
	fi

	printf "Getting data for episode %d\n" $episode

	video_id=$(get_video_id "$anime_id" "$episode")
	video_token=$(get_video_token "$video_id")
	video_url=$(get_video_url "$video_id" "$video_token")
	echo $video_id $video_token $video_url

if [ $is_download -eq 0 ]; then
	# write anime and episode number
	sed -E "
	s/^${selection_id}\t[0-9]+/${selection_id}\t$((episode+1))/
	" "$logfile" > "${logfile}.new" && mv "${logfile}.new" "$logfile"

	$_PLAYER "$video_url"
else
	printf "Downloading episode $episode ...\n"
	printf "%s\n" "$video_url"
	# add 0 padding to the episode name
	episode=$(printf "%03d" $episode)
	{
		$_ARIA -d ~/Downloads -x $_THREAD "$video_url"
	}
fi
}

########
# main #
########

case $scrape in
	query)
		get_search_query "$*"
		search_results=$(search_anime "$query")
		[ -z "$search_results" ] && die "No search results found"
		anime_selection "$search_results"
		episode_selection
		;;
	history)
		search_results=$(sed -n -E 's/\t[0-9]*//p' "$logfile")
		[ -z "$search_results" ] && die "History is empty"
		anime_selection "$search_results"
		ep_choice_start=$(sed -n -E "s/${selection_id}\t//p" "$logfile")
		;;
esac


{ # checking input
	[ "$ep_choice_start" -eq "$ep_choice_start" ] 2>/dev/null || die "Invalid number entered"
	episodes=$ep_choice_start

	if [ -n "$ep_choice_end" ]; then
		[ "$ep_choice_end" -eq "$ep_choice_end" ] 2>/dev/null || die "Invalid number entered"
		# create list of episodes to download/watch
		episodes=$(seq $ep_choice_start $ep_choice_end)
	fi
}

# add anime to history file
grep -q -w "${selection_id}" "$logfile" ||
	printf "%s\t%d\n" "$selection_id" $((episode+1)) >> "$logfile"

for ep in $episodes
do
	open_episode "$selection_id" "$ep"
done
episode=${ep_choice_end:-$ep_choice_start}

while :; do
	printf "\n${c_green}Currently playing %s episode ${c_cyan}%d/%d\n" "$selection_id" $episode $last_ep_number
	printf "$c_blue[${c_cyan}%s$c_blue] $c_yellow%s$c_reset\n" "n" "next episode"
	printf "$c_blue[${c_cyan}%s$c_blue] $c_magenta%s$c_reset\n" "p" "previous episode"
	printf "$c_blue[${c_cyan}%s$c_blue] $c_yellow%s$c_reset\n" "s" "select episode"
	printf "$c_blue[${c_cyan}%s$c_blue] $c_magenta%s$c_reset\n" "r" "replay current episode"
	printf "$c_blue[${c_cyan}%s$c_blue] $c_red%s$c_reset\n" "q" "exit"
	printf "${c_blue}Enter choice:${c_green} "
	read choice
	printf "$c_reset"
	case $choice in
		n)
			episode=$((episode + 1))
			;;
		p)
			episode=$((episode - 1))
			;;

		s)	printf "${c_blue}Choose episode $c_cyan[1-%d]$c_reset:$c_green " $last_ep_number
			read episode
			printf "$c_reset"
			[ "$episode" -eq "$episode" ] 2>/dev/null || die "Invalid number entered"
			;;

		r)
			episode=$((episode))
			;;

		q)
			break;;

		*)
			die "invalid choice"
			;;
	esac

	open_episode "$selection_id" "$episode"
done
